// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package modify

import (
	"fmt"
	"strings"
)

const (
	// ActionAppend is a Action of type append.
	ActionAppend Action = "append"
	// ActionPrepend is a Action of type prepend.
	ActionPrepend Action = "prepend"
	// ActionReplace is a Action of type replace.
	ActionReplace Action = "replace"
	// ActionDelete is a Action of type delete.
	ActionDelete Action = "delete"
)

var ErrInvalidAction = fmt.Errorf("not a valid Action, try [%s]", strings.Join(_ActionNames, ", "))

var _ActionNames = []string{
	string(ActionAppend),
	string(ActionPrepend),
	string(ActionReplace),
	string(ActionDelete),
}

// ActionNames returns a list of possible string values of Action.
func ActionNames() []string {
	tmp := make([]string, len(_ActionNames))
	copy(tmp, _ActionNames)
	return tmp
}

// String implements the Stringer interface.
func (x Action) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Action) IsValid() bool {
	_, err := ParseAction(string(x))
	return err == nil
}

var _ActionValue = map[string]Action{
	"append":  ActionAppend,
	"prepend": ActionPrepend,
	"replace": ActionReplace,
	"delete":  ActionDelete,
}

// ParseAction attempts to convert a string to a Action.
func ParseAction(name string) (Action, error) {
	if x, ok := _ActionValue[name]; ok {
		return x, nil
	}
	return Action(""), fmt.Errorf("%s is %w", name, ErrInvalidAction)
}

// MarshalText implements the text marshaller method.
func (x Action) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Action) UnmarshalText(text []byte) error {
	tmp, err := ParseAction(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
