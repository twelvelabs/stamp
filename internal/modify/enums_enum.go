// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package modify

import (
	"fmt"
	"strings"

	"github.com/swaggest/jsonschema-go"
)

const (
	// Append to the destination content.
	ActionAppend Action = "append"
	// Prepend to the destination content.
	ActionPrepend Action = "prepend"
	// Replace the destination.
	ActionReplace Action = "replace"
	// Delete the destination content.
	ActionDelete Action = "delete"
)

var ErrInvalidAction = fmt.Errorf("not a valid Action, try [%s]", strings.Join(_ActionNames, ", "))

var _ActionNames = []string{
	string(ActionAppend),
	string(ActionPrepend),
	string(ActionReplace),
	string(ActionDelete),
}

// ActionNames returns a list of possible string values of Action.
func ActionNames() []string {
	tmp := make([]string, len(_ActionNames))
	copy(tmp, _ActionNames)
	return tmp
}

// String implements the Stringer interface.
func (x Action) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Action) IsValid() bool {
	_, err := ParseAction(string(x))
	return err == nil
}

var _ActionValue = map[string]Action{
	"append":  ActionAppend,
	"prepend": ActionPrepend,
	"replace": ActionReplace,
	"delete":  ActionDelete,
}

// ParseAction attempts to convert a string to a Action.
func ParseAction(name string) (Action, error) {
	if x, ok := _ActionValue[name]; ok {
		return x, nil
	}
	return Action(""), fmt.Errorf("%s is %w", name, ErrInvalidAction)
}

// MarshalText implements the text marshaller method.
func (x Action) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Action) UnmarshalText(text []byte) error {
	tmp, err := ParseAction(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var (
	_ jsonschema.Described = Action("")
	_ jsonschema.Enum      = Action("")
	_ jsonschema.Preparer  = Action("")
)

// PrepareJSONSchema implements the jsonschema.Preparer interface.
func (x Action) PrepareJSONSchema(schema *jsonschema.Schema) error {
	schema.WithTitle("Action")
	schema.WithDescription(x.Description())
	schema.WithEnum(x.Enum()...)
	schema.WithExtraPropertiesItem("enumDescriptions", x.EnumComments())
	return nil
}

// Enum implements the jsonschema.Described interface.
func (x Action) Description() string {
	return `Determines what type of modification to perform.

The append/prepend behavior differs slightly depending on
the destination content type. Strings are concatenated,
numbers are added, and objects are recursively merged.
Arrays are concatenated by default, but that behavior can
be customized via the 'merge' enum.

Replace and delete behave consistently across all types.`
}

// Enum implements the jsonschema.Enum interface.
func (x Action) Enum() []any {
	return []any{
		"append",
		"prepend",
		"replace",
		"delete",
	}
}

// EnumComments returns the comment associated with each enum.
func (x Action) EnumComments() []string {
	return []string{
		"Append to the destination content.",
		"Prepend to the destination content.",
		"Replace the destination.",
		"Delete the destination content.",
	}
}

const (
	// Concatenate source and destination arrays.
	MergeTypeConcat MergeType = "concat"
	// Add source array items if not present in the destination.
	MergeTypeUpsert MergeType = "upsert"
	// Replace the destination with the source.
	MergeTypeReplace MergeType = "replace"
)

var ErrInvalidMergeType = fmt.Errorf("not a valid MergeType, try [%s]", strings.Join(_MergeTypeNames, ", "))

var _MergeTypeNames = []string{
	string(MergeTypeConcat),
	string(MergeTypeUpsert),
	string(MergeTypeReplace),
}

// MergeTypeNames returns a list of possible string values of MergeType.
func MergeTypeNames() []string {
	tmp := make([]string, len(_MergeTypeNames))
	copy(tmp, _MergeTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x MergeType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MergeType) IsValid() bool {
	_, err := ParseMergeType(string(x))
	return err == nil
}

var _MergeTypeValue = map[string]MergeType{
	"concat":  MergeTypeConcat,
	"upsert":  MergeTypeUpsert,
	"replace": MergeTypeReplace,
}

// ParseMergeType attempts to convert a string to a MergeType.
func ParseMergeType(name string) (MergeType, error) {
	if x, ok := _MergeTypeValue[name]; ok {
		return x, nil
	}
	return MergeType(""), fmt.Errorf("%s is %w", name, ErrInvalidMergeType)
}

// MarshalText implements the text marshaller method.
func (x MergeType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MergeType) UnmarshalText(text []byte) error {
	tmp, err := ParseMergeType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var (
	_ jsonschema.Described = MergeType("")
	_ jsonschema.Enum      = MergeType("")
	_ jsonschema.Preparer  = MergeType("")
)

// PrepareJSONSchema implements the jsonschema.Preparer interface.
func (x MergeType) PrepareJSONSchema(schema *jsonschema.Schema) error {
	schema.WithTitle("MergeType")
	schema.WithDescription(x.Description())
	schema.WithEnum(x.Enum()...)
	schema.WithExtraPropertiesItem("enumDescriptions", x.EnumComments())
	return nil
}

// Enum implements the jsonschema.Described interface.
func (x MergeType) Description() string {
	return `Determines merge behavior for arrays - either when modifying them directly
or when recursively merging objects containing arrays.`
}

// Enum implements the jsonschema.Enum interface.
func (x MergeType) Enum() []any {
	return []any{
		"concat",
		"upsert",
		"replace",
	}
}

// EnumComments returns the comment associated with each enum.
func (x MergeType) EnumComments() []string {
	return []string{
		"Concatenate source and destination arrays.",
		"Add source array items if not present in the destination.",
		"Replace the destination with the source.",
	}
}
