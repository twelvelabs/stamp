
var (
	_ jsonschema.Described = {{ .enum.Name }}({{ if eq .enum.Type "string" }}""{{ else }}0{{ end }})
	_ jsonschema.Enum      = {{ .enum.Name }}({{ if eq .enum.Type "string" }}""{{ else }}0{{ end }})
	_ jsonschema.Preparer  = {{ .enum.Name }}({{ if eq .enum.Type "string" }}""{{ else }}0{{ end }})
)

// PrepareJSONSchema implements the jsonschema.Preparer interface.
func (x {{ .enum.Name }}) PrepareJSONSchema(schema *jsonschema.Schema) error {
	schema.WithTitle("{{ .enum.Name }}")
	schema.WithDescription(x.Description())
	schema.WithEnum(x.Enum()...)
	schema.WithExtraPropertiesItem("enumDescriptions", x.EnumComments())
	return nil
}

// Enum implements the jsonschema.Described interface.
func (x {{ .enum.Name }}) Description() string {
    return `{{ .enum.Comment | replace "`" "'" }}`
}

// Enum implements the jsonschema.Enum interface.
func (x {{ .enum.Name }}) Enum() []any {
	return []any{
{{- $enumType := .enum.Type -}}
{{- range $value := .enum.Values }}
		{{ if eq $enumType "string" }}"{{ $value.ValueStr }}"{{ else }}{{ $value.ValueInt }}{{ end }},
{{- end}}
	}
}

// EnumComments returns the comment associated with each enum.
func (x {{ .enum.Name }}) EnumComments() []string {
	return []string{
{{- range $value := .enum.Values }}
		"{{ $value.Comment }}",
{{- end}}
	}
}
